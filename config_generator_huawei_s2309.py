# -*- coding: utf-8 -*-
"""практика отчет.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dgd0UQ-6rusPgaO3UjbK-kiCbovVCEPN
"""

import tkinter as tk
import ipaddress

def generate_config():
    switch_ip = switch_ip_entry.get()
    sysname = sysname_entry.get()
    management_vlan = management_vlan_entry.get()
    client_vlan = client_vlan_entry.get()
    subnet_mask = int(subnet_mask_var.get().lstrip('/'))  # Преобразуем выбранное значение маски в число
    uplink_port = uplink_port_var.get()  # Получаем выбранный аплинковый порт
    user = user_entry.get()  # получение пользоваеля
    password = password_entry.get()  # получение пароля

    try:
        network = ipaddress.IPv4Network(f'{switch_ip}/{subnet_mask}', strict=False)
        switch_ip = switch_ip  # Получаем строковое представление адреса сети
        subnet_mask = str(network.netmask)  # Получаем строковое представление маски подсети
    except ValueError:
        result_label.config(text="Ошибка: Неверный формат IP-адреса или маски подсети")
        return

    config_text = f'''
sys
#
aaa
local-user {user} state active password cipher {password} idle-timeout 600 0
local-user {user} privilege level 15
local-user {user} service-type telnet terminal ssh
#
hostname {sysname}
#
vlan {management_vlan}
description "MNGMT"

vlan {client_vlan}
description "Client"
#
interface Vlanif{management_vlan}
ip address {switch_ip} {network.netmask}
#
ip route-static 0.0.0.0 0.0.0.0 Vlanif{management_vlan} {network.network_address + 1}
#
interface {uplink_port}
description Uplink
port link-type trunk
port trunk all allow pass vlan {management_vlan} {client_vlan}
#
user-interface con 0
authentication-mode aaa
idle-timeout 0 0
#
user-interface vty 0 4
authentication-mode aaa
protocol indound all
#
user-interface vty 16 20
authentication-mode aaa
protocol indound all
#
telnet server enable
stelnet server enable
ssh aunthentication-type default password
save
'''
    with open('switch_config.txt', 'w') as file:
        file.write(config_text)

    result_label.config(text="Сгенерирован файл конфигурации: switch_config.txt")


# Создаем окно GUI
window = tk.Tk()
window.title("Генератор конфигурации коммутатора")

# Добавляем поля ввода пользователя и пароля
user_label = tk.Label(window, text="Пользователь:")
user_label.pack()
user_entry = tk.Entry(window)
user_entry.pack()

password_label = tk.Label(window, text="Пароль:")
password_label.pack()
password_entry = tk.Entry(window, show="*")  # для скрытия введенного пароля
password_entry.pack()

# Добавляем поля ввода для IP-адреса коммутатора, имени системы, управляющей VLAN и клиентской VLAN
switch_ip_label = tk.Label(window, text="IP-адрес коммутатора:")
switch_ip_label.pack()
switch_ip_entry = tk.Entry(window)
switch_ip_entry.pack()

subnet_mask_label = tk.Label(window, text="Маска подсети:")
subnet_mask_label.pack()
subnet_masks = [f"/{i}" for i in range(1, 33)]  # Список вариантов маски подсети
subnet_mask_var = tk.StringVar(window)
subnet_mask_var.set("/24")  # Маска подсети по умолчанию
subnet_mask_menu = tk.OptionMenu(window, subnet_mask_var, *subnet_masks)
subnet_mask_menu.pack()

sysname_label = tk.Label(window, text="Hostname:")
sysname_label.pack()
sysname_entry = tk.Entry(window)
sysname_entry.pack()

management_vlan_label = tk.Label(window, text="Управляющий VLAN:")
management_vlan_label.pack()
management_vlan_entry = tk.Entry(window)
management_vlan_entry.pack()

client_vlan_label = tk.Label(window, text="Клиентский VLAN:")
client_vlan_label.pack()
client_vlan_entry = tk.Entry(window)
client_vlan_entry.pack()

# Добавляем выпадающее меню для выбора аплинкового порта
uplink_port_label = tk.Label(window, text="Выберите аплинковый порт:")
uplink_port_label.pack()
uplink_ports = ["Ethernet0/0/1", "Ethernet0/0/2", "Ethernet0/0/3", "Ethernet0/0/4", "Ethernet0/0/5", "Ethernet0/0/6", "Ethernet0/0/7", "Ethernet0/0/8", "GigabitEthernet0/0/1"]
uplink_port_var = tk.StringVar(window)
uplink_port_var.set("Ethernet0/0/1")  # Устанавливаем значение по умолчанию
uplink_port_menu = tk.OptionMenu(window, uplink_port_var, *uplink_ports)
uplink_port_menu.pack()

# Добавляем кнопку для генерации конфигурации
generate_button = tk.Button(window, text="Сгенерировать конфигурацию", command=generate_config)
generate_button.pack()

# Добавляем метку для отображения результата
result_label = tk.Label(window, text="")
result_label.pack()

window.mainloop()
