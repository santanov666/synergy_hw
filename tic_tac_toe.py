# -*- coding: utf-8 -*-
"""tic_tac_toe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10DwGyimXZh8td8Jt86TajS1FsqqHeK5P
"""

import random

def draw_board(board):
    print(board[0] + '|' + board[1]  + '|'+ board[2])
    print('-+-+-')
    print(board[3] + '|' + board[4]  + '|'+ board[5])
    print('-+-+-')
    print(board[6] + '|' + board[7]  + '|'+ board[8])

def get_player_move(board, player):
    while True:
        move = input(f'Игрок {player}, введите номер ячейки от (1 - 9) ')
        if move.isdigit() and 1 <= int(move) <= 9 and board[int(move) - 1] == ' ':
            return int(move) - 1
        else:
            print('Недопустимый ход. Попробуйте еще раз')

def get_computer_move(board):
    while True:
        move = random.randint(0, 9)
        if board[move] == ' ':
            return move

def check_win(board, player):
    for i in range(3):
        if board[i] == board[i + 3] == board[i + 6] == player:
            return True
        if board[i * 3] == board[i * 3 + 1] == board[i * 3 + 2] == player:
            return True
    if board[0] == board[4] == board[8] == player or board[2] == board[4] == board[6] == player:
        return True
    return False

def main():
    board = [' '] * 9
    players = ['X', '0']
    turn = 0
    print('Добро пожаловать в игру')
    while True:
        draw_board(board)
        player = players[turn % 2]
        if player == 'X':
            move = get_player_move(board, player)
        else:
            print(f'Компьютер {player} делает ход')
            move = get_computer_move(board)
        board[move] = player
        if check_win(board, player):
            draw_board(board)
            print(f'Поздравляем! Игрок {player} победил')
            break
        elif ' ' not in board:
            draw_board(board)
            print('Ничья')
            break
        turn += 1

main()

#вариант 2(мы не проходили try except но с ними логичнее)
#1. Создайте новый файл и назовите его "tic_tac_toe.py".

# 2. Импортируйте модуль "random" для генерации случайных чисел:
import random


def draw_board(board):
    print(f" {board[0]} | {board[1]} | {board[2]} ")
    print("---|---|---")
    print(f" {board[3]} | {board[4]} | {board[5]} ")
    print("---|---|---")
    print(f" {board[6]} | {board[7]} | {board[8]} ")

# 4. Создайте функцию "get_player_move", которая будет запрашивать у игрока ход и проверять его на корректность.
def get_player_move(board, player_symbol):
    while True:
        try:
            move = int(input(f"Ваш ход, игрок {player_symbol} (1-9): ")) - 1
            if 0 <= move <= 8 and board[move] == " ":
                return move
            else:
                print("Некорректный ход. Попробуйте еще раз.")
        except ValueError:
            print("Введите число.")

# 5. Создайте функцию "get_computer_move", которая будет генерировать случайный ход компьютера.
def get_computer_move(board, computer_symbol):
    available_moves = [i for i in range(9) if board[i] == " "]
    return random.choice(available_moves)

# 6. Создайте функцию "check_win", которая будет проверять, есть ли победитель в игре.
def check_win(board, symbol):
    # Проверка по горизонтали, вертикали и диагоналям
    for i in range(3):
        if all(board[i*3 + j] == symbol for j in range(3)) or all(board[i + j*3] == symbol for j in range(3)):
            return True
    if all(board[i] == symbol for i in [0, 4, 8]) or all(board[i] == symbol for i in [2, 4, 6]):
        return True
    return False

# 7. Создайте функцию "main", которая будет запускать игру.
def main():
    # Инициализация игрового поля (списка из девяти элементов)
    board = [" "] * 9

    # Запуск игрового цикла
    while True:
        # Ход игрока
        player_move = get_player_move(board, "X")

        # Обновление игрового поля
        board[player_move] = "X"
        draw_board(board)

        # Проверка на победу игрока
        if check_win(board, "X"):
            print("Вы выиграли!")
            break

        # Проверка на ничью
        if " " not in board:
            print("Ничья!")
            break

        # Ход компьютера
        computer_move = get_computer_move(board, "O")

        # Обновление игрового поля
        board[computer_move] = "O"
        draw_board(board)

        # Проверка на победу компьютера
        if check_win(board, "O"):
            print("Компьютер выиграл!")
            break

        # Проверка на ничью
        if " " not in board:
            print("Ничья!")
            break

# 8. Запустите игру, вызвав функцию "main":

main()